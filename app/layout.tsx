import type { Metadata, Viewport } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { MiniKitContextProvider } from "@/components/providers/MiniKitProvider";

const geistSans = Geist({
    variable: "--font-geist-sans",
    subsets: ["latin"],
});

const geistMono = Geist_Mono({
    variable: "--font-geist-mono",
    subsets: ["latin"],
});

export const viewport: Viewport = {
    width: "device-width",
    initialScale: 1,
};

export async function generateMetadata(): Promise<Metadata> {
    const URL = process.env.NEXT_PUBLIC_URL;
    return {
        title: process.env.NEXT_PUBLIC_ONCHAINKIT_PROJECT_NAME,
        description:
            "Generated by `create-onchain --mini`, a Next.js template for MiniKit",
        other: {
            "fc:frame": JSON.stringify({
                version: "next",
                imageUrl: process.env.NEXT_PUBLIC_APP_HERO_IMAGE,
                button: {
                    title: `Launch ${process.env.NEXT_PUBLIC_ONCHAINKIT_PROJECT_NAME}`,
                    action: {
                        type: "launch_frame",
                        name: process.env.NEXT_PUBLIC_ONCHAINKIT_PROJECT_NAME,
                        url: URL,
                        splashImageUrl: process.env.NEXT_PUBLIC_SPLASH_IMAGE,
                        splashBackgroundColor:
                            process.env.NEXT_PUBLIC_SPLASH_BACKGROUND_COLOR,
                    },
                },
            }),
        },
    };
}
export default function RootLayout({
    children,
}: Readonly<{
    children: React.ReactNode;
}>) {
    return (
        <html lang="en">
            <body
                className={`${geistSans.variable} ${geistMono.variable} antialiased`}
            >
                <MiniKitContextProvider>{children}</MiniKitContextProvider>
            </body>
        </html>
    );
}
